# version: 0.2
# env:
#   secrets-manager:
#     LOGIN: prod/sonar:sonartoken
#     HOST: prod/sonar:HOST
#     Organization: prod/sonar:Organization
#     Project: prod/sonar:Project
# phases:
#   install:
#     runtime-versions:
#       python: 3.11
#     commands:
#       - pip install -r requirements.txt
#   build:
#     commands:
#       - ls -l 
#       - pwd
#       - ls
#       - python manage.py collectstatic --no-input
#       - python manage.py migrate
#       - zip -r parking.zip . -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "env/*"
# artifacts:
#   files:
#     - "**/*"
#   discard-paths: no


# version: 0.2

# env:
#   secrets-manager:
#     LOGIN: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:sonartoken     # SonarQube token
#     HOST: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:HOST           # SonarQube server URL
#     Organization: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:Organization  # Organization name in SonarQube
#     Project: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:Project     # Project key in SonarQube

# phases:
#   install:
#     runtime-versions:
#       python: 3.11
#     commands:
#       - echo "Verifying SonarQube configuration..."
#       - echo "Host: $HOST"
#       - echo "Project Key: $Project"
#       - echo "Organization: $Organization"
#       - echo "Installing SonarQube Scanner..."
#       - wget -O sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
#       - unzip sonar-scanner-cli.zip
#       - export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin

#   pre_build:
#     commands:
#       - echo "Preparing environment..."
#       - export SONAR_SCANNER_OPTS="-Xmx1024m"  # Optional: Memory settings
#       - echo "SonarQube configuration:"
#       # - echo "Host: $HOST"
#       # - echo "Project: $Project"
#       # - echo "Organization: $Organization"

#   build:
#     commands:
#       - echo "Starting SonarQube scan..."
#       - sonar-scanner -Dsonar.projectKey=$Project -Dsonar.organization=$Organization -Dsonar.sources=.  -Dsonar.host.url=$HOST  -Dsonar.login=$LOGIN 
                      
# artifacts:
#   files:
#     - "**/*"
#   discard-paths: no


 

version: 0.2

env:
  secrets-manager:
    LOGIN: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:sonartoken     # SonarQube token
    HOST: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:HOST           # SonarQube server URL
    Organization: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:Organization  # Organization name in SonarQube
    Project: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:Project     # Project key in SonarQube

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - yum install -y jq
      - echo "Installing dependencies..."
      - pip install -r requirements.txt
      - echo "Installing SonarQube Scanner..."
      - wget -O sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli.zip
      - export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin

  pre_build:
    commands:
      - echo "Preparing environment..."
      - export SONAR_SCANNER_OPTS="-Xmx1024m"  # Optional: Memory settings
      - echo "Starting SonarQube scan..."
      - sonar-scanner -Dsonar.projectKey=$Project -Dsonar.organization=$Organization -Dsonar.sources=.  -Dsonar.host.url=$HOST  -Dsonar.login=$LOGIN 

  build:
    commands:
      - echo "Polling SonarQube for Quality Gate status..."
      - |
        ANALYSIS_ID=""
        MAX_RETRIES=10
        SLEEP_TIME=10  # Wait time between retries (seconds)

        # Fetch the analysis ID
        echo "Fetching analysis ID..."
        ANALYSIS_ID=$(curl -s -u $LOGIN: "$HOST/api/ce/component?component=$Project" | jq -r '.queue[0].taskId')

        echo "Analysis ID: $ANALYSIS_ID"
        if [ -z "$ANALYSIS_ID" ]; then
          echo "Failed to fetch analysis ID. Exiting..."
          exit 1
        fi

        # Wait for analysis to complete
        for i in $(seq 1 $MAX_RETRIES); do
          STATUS=$(curl -s -u $LOGIN: "$HOST/api/ce/task?id=$ANALYSIS_ID" | jq -r '.task.status')
          echo "Attempt $i: Analysis status = $STATUS"

          if [ "$STATUS" == "SUCCESS" ]; then
            echo "Analysis completed. Checking Quality Gate status..."
            break
          fi

          if [ "$STATUS" == "FAILED" ]; then
            echo "Analysis failed on SonarQube server."
            exit 1
          fi

          if [ $i -eq $MAX_RETRIES ]; then
            echo "Analysis did not complete in time. Exiting..."
            exit 1
          fi

          sleep $SLEEP_TIME
        done

        # Check Quality Gate status
        SONAR_STATUS=$(curl -s -u $LOGIN: "$HOST/api/qualitygates/project_status?projectKey=$Project" | jq -r '.projectStatus.status')
        echo "Quality Gate status: $SONAR_STATUS"

        if [ "$SONAR_STATUS" != "OK" ]; then
          echo "Quality Gate FAILED. Exiting pipeline."
          exit 1
        else
          echo "Quality Gate PASSED."
        fi


      - echo "Running Django commands..."
      - python manage.py collectstatic --no-input
      - python manage.py migrate
      - echo "Zipping project for deployment..."
      - zip -r parking.zip . -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "env/*"

artifacts:
  files:
    - "**/*"
  discard-paths: no


