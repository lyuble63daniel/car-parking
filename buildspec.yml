version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - pip install -r requirements.txt
  build:
    commands:
      - ls -l 
      - pwd
      - ls
      - python manage.py collectstatic --no-input
      - python manage.py migrate
      - zip -r parking.zip . -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "env/*"
artifacts:
  files:
    - "**/*"
  discard-paths: no


 

# version: 0.2

# env:
#   secrets-manager:
#     LOGIN: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:sonartoken     # SonarQube token
#     HOST: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:HOST           # SonarQube server URL
#     Organization: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:Organization  # Organization name in SonarQube
#     Project: arn:aws:secretsmanager:eu-west-1:250738637992:secret:x23249463-lyuble-car-parking-maPJoU:Project     # Project key in SonarQube

# phases:
#   install:
#     runtime-versions:
#       python: 3.11
#     commands:
#       - yum install -y jq
#       - echo "Installing dependencies..."
#       - pip install -r requirements.txt
#       - echo "Installing SonarQube Scanner..."
#       - wget -O sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
#       - unzip sonar-scanner-cli.zip
#       - export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin

#   pre_build:
#     commands:
#       - echo "Preparing environment..."
#       - export SONAR_SCANNER_OPTS="-Xmx1024m"  # Optional: Memory settings
#       - echo "Starting SonarQube scan..."
#       - sonar-scanner -Dsonar.projectKey=$Project -Dsonar.organization=$Organization -Dsonar.sources=.  -Dsonar.host.url=$HOST  -Dsonar.login=$LOGIN 

#   build:
#     commands:
#       # Fetch Quality Gate status
#       - echo "Checking SonarQube Quality Gate status..."
#       - |
#         SONAR_STATUS=$(curl -s -u $LOGIN: "$HOST/api/qualitygates/project_status?projectKey=$Project" | jq -r '.projectStatus.status')
#         echo "Quality Gate status: $SONAR_STATUS"
#         if [ "$SONAR_STATUS" != "OK" ]; then
#           echo "Quality Gate FAILED. Exiting pipeline."
#           exit 1
#         else
#           echo "Quality Gate PASSED."
#         fi


#       - echo "Running Django commands..."
#       - python manage.py collectstatic --no-input
#       - python manage.py migrate
#       - echo "Zipping project for deployment..."
#       - zip -r parking.zip . -x "*.git*" "*__pycache__*" "*.pyc" "*.pyo" "env/*"

# artifacts:
#   files:
#     - "**/*"
#   discard-paths: no


